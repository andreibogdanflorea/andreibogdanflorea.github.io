---
import type { Skill } from '../types'

const { title, skills } = Astro.props
---

<div class="skill-category skill-animation-group">
  <h3 class="skill-category-title">{title}</h3>
  <div class="grid gap-6 w-full grid-cols-1 sm:grid-cols-2 md:grid-cols-3">
    {(skills as Skill[]).map((skill: Skill, index: number) => (
  <div class="skill-card bg-background border border-border p-5 rounded-xl shadow-md w-full relative skill-fade-in" style={`transition-delay: ${index * 100}ms`}>
    {skill.type === 'devicon' ? (
      <i class={`${skill.icon} skill-icon`} aria-hidden="true" style="color: hsl(var(--primary))"></i>
    ) : skill.type === 'material' ? (
      <span class="material-symbols-outlined" aria-hidden="true" style="color: hsl(var(--primary))">{skill.icon}</span>
    ) : null}

    <div class="text-base md:text-lg font-medium mb-2 text-left">{skill.name}</div>
    <div class="w-full bg-muted h-3 rounded-full overflow-hidden">
      <div
        class="skill-progress-bar h-full bg-gradient-to-r from-primary to-accent rounded-full"
        data-skill-level={skill.level}
      ></div>
    </div>
  </div>
))}
  </div>
</div>



<style>
  .skill-category-title {
    position: relative;
    display: inline-block;
    padding-bottom: 8px;
  }
  .skill-category-title::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 50px;
    height: 2px;
    background: linear-gradient(45deg, hsl(var(--primary)), hsl(var(--accent)));
  }
</style>

